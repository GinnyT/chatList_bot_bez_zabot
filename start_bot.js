///--GLOBAL statements

const DB = require('./chat_data_in_db');
const { Pool } = require('pg');
const { Telegraf } = require('telegraf');
const { message } = require('telegraf/filters');

//@TODO: –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –≤—ã–∑–≤–∞—Ç—å –µ–¥–∏–Ω–æ–∂–¥—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getMe() —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞, –Ω–æ –Ω–µ –≥—Ä—É–∑–∏—Ç—å –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –≤–Ω—É—Ç—Ä–∏ use. –ø–æ–∫–∞ —Ä–µ—à–∏–ª –∑–∞—à–∏—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
const bot = new Telegraf(process.env.TOKEN);
console.log(`–°—Ç–∞—Ä—Ç—É–µ—Ç –±–æ—Ç: @${process.env.BOT_NAME}`);

//–û–∫—Ä—É–∂–µ–Ω–∏–µ –∑–¥–µ—Å—å?
//console.log(`process.env=\n${JSON.stringify(process.env, null, 1)}`);

//–≠–∫–∑–µ–º–ø–ª—è—Ä –±–¥ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
//const db_pool = new Pool();
// –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
let counter = 0;
let db_data;
let CHAT_NAME = '–°–ø–∏—Å–æ–∫'; //@todo –∑–∞—á–µ–º?
const LIST_BTN = {inline_keyboard: [[{text: CHAT_NAME, callback_data: 'list'}]] }
const HELP_BTN = {inline_keyboard: [[{text: "–ø–æ–º–æ—â—å", callback_data: 'help_action'}]] }
const LIST_N_HELP_BTN = {inline_keyboard: [[LIST_BTN.inline_keyboard[0][0], HELP_BTN.inline_keyboard[0][0]]]}
const LOAD_EMJ = '...\u{1F90C}...';
const EMPTY_LIST_MES = '</b>: <i>–ø–æ–∫–∞ –ø—É—Å—Ç–æ...</i>ü§∑‚Äç‚ôÇÔ∏è –∑–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫:';
//—Ö–µ–ª–ø–µ—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–µ–π –≤ —Ä–µ–∂–∏–º–µ parse-mode html
const escapeHtml = (unsafe) => {
  return unsafe.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll('"', '&quot;').replaceAll("'", '&#039;');
 }
///--
//
///--–û–ë–û–õ–û–ß–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.use(async (ctx, next) => {
  const start_time = new Date();
  console.log(`\n${new Date().toLocaleString()}---------------–Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –∏–∑ —á–∞—Ç–∞: ${JSON.stringify(ctx.chat)} –æ—Ç ${ctx.from.username} —Ç–∏–ø: ${ctx.updateType}`);
  
  if (ctx.updateType === 'inline_query') {
    console.warn('inline_query (–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)=\n',JSON.stringify(ctx.inlineQuery,null,1));
  //
  } else {
    db_data = await DB.init(ctx.chat, new Pool());
    CHAT_NAME = db_data.list_name.name;
    console.log(CHAT_NAME);
    await next();
    await db_data.db.end();
  }
  console.log(`---------------–≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${new Date() - start_time}`);
});

// –ú–ï–ù–Æ –∫–æ–º–∞–Ω–¥
bot.telegram.setMyCommands([
  {
    command: 'help',
    description: '–ø–æ–º–æ—á—å? ü§î',
  },
  {
    command: 'list',
    description: '–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ üí¨',
  },
  { 
    command: 'print',
    description: '–≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ üñ®',
  },
  {
    command: 'settings',
    description: '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô',
  }],{scope: {type: 'default'}, language_code: 'ru'}
);
//
bot.telegram.setMyCommands([
  {
    command: 'help',
    description: 'descriptions ü§î',
  },
  {
    command: 'list',
    description: 'the list of the chat üí¨',
  },
  { 
    command: 'print',
    description: 'print out the üñ®',
  },
  {
    command: 'settings',
    description: 'settings of the chat list ‚öô',
  }],{scope: {type: 'default'}, language_code: 'en'}
);
///--
//
///--parts START, LIST and SHOW
bot.action('show_action', async (ctx)=>{
  db_data.wait_for_value_at(undefined);
  show_list_helper(ctx,undefined, ms = 0, action_text=' üëá')
});
//
bot.command('start', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/start"');
  db_data.wait_for_name(false);
  kill_panel_helper(ctx);
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ—á—å –∏–ª–∏ —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É? üëá‚úç', {reply_to_message_id: ctx.message?.message_id} )
  .catch(err=>console.error(err));

  const {message_id} = await ctx.reply('...');
  db_data.set_last_list_message_id(message_id);
  show_list_helper(ctx, message_id, 0, '—Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω. —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! \u{1FAF6}');
});
// –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ 
bot.command('list', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/list"');
  db_data.wait_for_name(false);
  kill_panel_helper(ctx);
  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  db_data.set_last_list_message_id(message_id);
  show_list_helper(ctx, message_id, 0, ' üëá');
});
//
async function show_list_helper(ctx, is_message_id = undefined, ms = 0, action_text='') {
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
  //console.log('–ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ show_list_helper.\n  db_data.last_list_message_id=',db_data.last_list_message_id,'\n  current_message_id=',current_message_id);
  try {
    if (!db_data.is_empty) {
      //—É–±–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å
      if (db_data.last_list_message_id && db_data.last_list_message_id != current_message_id) {
        kill_panel_helper(ctx);
       }
      await new Promise(r => setTimeout(r, ms));
      //—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      let elemets_arr = db_data.list.map((element, index)=>{
        let row = [];
        if (db_data.edit_mode) {
          row = [
            {text: '‚¨Ü', callback_data: `move_up ${index}`},
            {text: 'üóëÔ∏è '+ element.value, callback_data: `kick ${index}`},
            {text: '‚úèÔ∏è', callback_data: `edit ${index}`},
          ];
        } else {
          row = [{text: element.value, callback_data: `kick ${index}`}];
        }
        return row;
      });
      //–æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
      await ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0,
        '<b>'+escapeHtml(CHAT_NAME)+'</b>: '+escapeHtml(action_text),
        {
          reply_markup: {
              inline_keyboard: elemets_arr.concat([[
                {text: "üìõ –æ—á–∏—Å—Ç–∏—Ç—å", callback_data: 'clear_action'},
                {text: db_data.edit_mode ? '‚úÖ ‚úèÔ∏è' : '‚úèÔ∏è', callback_data: 'edit_mode_action'},
                {text: "‚öô", callback_data: 'settings'},
                {text: "üñ® –≤—ã–≤–µ—Å—Ç–∏", callback_data: 'print'}, 
          ]])},
          parse_mode: 'html',
          reply_to_message_id: ctx.message?.message_id,
        });
    } else {
      await ctx.telegram.editMessageText(
        ctx.chat.id, current_message_id, 0,
        '<b>'+escapeHtml(CHAT_NAME)+EMPTY_LIST_MES,
        {reply_markup: HELP_BTN, reply_to_message_id: ctx.message?.message_id, parse_mode: 'html'})
      .catch(err=>console.error(err));
     }
  } catch(err) {console.error('—Å–ø–∏—Å–æ–∫ –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è', err) }    
 }
//
async function kill_panel_helper(ctx, current_message_id = undefined) {
  try {
    if (db_data.last_list_message_id && current_message_id != db_data.last_list_message_id) {
      ctx.telegram.editMessageReplyMarkup(ctx.chat.id, db_data.last_list_message_id, undefined, {}).catch(err=>console.error('–Ω–µ –Ω–∞—à–µ–ª —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –∏—Ö –≤—ã—á–∏—Å—Ç–∏—Ç—å:\n',err.name));
     }
  } catch(err) { console.error('–Ω–µ —Å–º–æ–≥ –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–Ω–µ–ª—å –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n', err.name) }
 }
///--
//
///--part EDIT
bot.action('edit_mode_action', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª —Ä–µ–∂–∏–º "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", –±—ã–ª–æ:', db_data.edit_mode);
  await db_data.toggle_edit_mode();
  ctx.answerCbQuery(db_data.edit_mode ? '–≤–∫–ª—é—á–µ–Ω ‚úçÔ∏è —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' : '—Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚úèÔ∏è –≤—ã–∫–ª—é—á–µ–Ω');
  const action_text = db_data.edit_mode ? ' ‚úçÔ∏è —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' : ' üëá'; 
  show_list_helper(ctx, undefined, 0, action_text);
});
//

//–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ (–≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞) - –ø–æ–¥–Ω—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤–≤–µ—Ä—Ö
bot.action(/^move_up \d+/, async (ctx)=>{
  if (ctx.callbackQuery.message?.message_id == db_data.last_list_message_id) {
    //–∫–Ω–æ–ø–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é move_up index, –≥–¥–µ index - –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ.
    //–ø–æ–ª—É—á–∏–º —ç—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏:
    const index = Number(ctx.callbackQuery.data.slice(7));
    //–ø–æ–ª—É—á–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    const element = db_data.list[index];
    console.log(`–Ω–∞–∂–∞–ª –ø–æ–¥–Ω—è—Ç—å –∏–Ω–¥–µ–∫—Å ‚Ññ${index} "${element.value}"`);
    //–≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å –∫—É–¥–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è, –µ—Å—Ç—å —Å–º—ã—Å–ª –∑–∞–º–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è?
    if (db_data.list.length > 1) {
      //–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã—Ö
      await db_data.move_up(index);
      //–ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
      show_list_helper(ctx, undefined, 0, `"${element.value}" –≤—Å–µ –≤—ã—à–µ ‚òùÔ∏è`);
    }
  } else {
    ctx.answerCbQuery('ü§∑‚Äç‚ôÇÔ∏è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫');
  }
});

bot.action(/^edit \d+/, async(ctx) =>{
  if (ctx.callbackQuery.message?.message_id == db_data.last_list_message_id) {
    const index = Number(ctx.callbackQuery.data.slice(4));
    const element = db_data.list[index];
    console.log(`–Ω–∞–∂–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å ‚Ññ${index} "${element.value}"`);

    await ctx.telegram.editMessageText(
      ctx.chat.id, db_data.last_list_message_id, 0,
      `${escapeHtml(CHAT_NAME)}: ‚úèÔ∏è ...\n\n>> —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <s>${escapeHtml(element.value)}</s>\n>> –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`,
      {
        parse_mode: 'html',
        reply_markup: {
        inline_keyboard: [[{text:'‚¨Ö –æ—Ç–º–µ–Ω–∞', callback_data: 'show_action'}],]}
      }
    ).catch(err=>console.error('–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è', err));
    await db_data.wait_for_value_at(index);
  } else {
    ctx.answerCbQuery('ü§∑‚Äç‚ôÇÔ∏è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫');
  }
});
///--
//
///--part PRINT
bot.action('print', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–≤—ã–≤–µ—Å—Ç–∏"');
  //
  if (!db_data.is_empty) {
    ctx.answerCbQuery('–≥–æ—Ç–æ–≤–æ! üñ® –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å...');
    ctx.editMessageText(
      '<b>'+escapeHtml(CHAT_NAME)+'</b>:\n'+db_data.list.map((v,i)=>{return (i+1)+'. '+'<code>' + escapeHtml(v.value) + '</code>'}).join('\n'),
      {
        reply_markup: {
            inline_keyboard: [[
              {text: "üìõ –æ—á–∏—Å—Ç–∏—Ç—å", callback_data: 'clear_action'},
              {text: "‚öô", callback_data: 'settings'},
              {text: "üñ•Ô∏è –ø–æ–∫–∞–∑–∞—Ç—å", callback_data: 'show_action'},
        ]]},
        parse_mode: 'html',
        reply_to_message_id: ctx.message?.message_id,
      }
    )
    .catch(err=>console.error('–ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ', err));
  } else {
    ctx.answerCbQuery(CHAT_NAME+': ü§∑‚Äç‚ôÇÔ∏è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç...');
 }});
//
bot.command('print', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/print"');
  db_data.wait_for_name(false);
  db_data.wait_for_value_at(undefined);
  kill_panel_helper(ctx);
  let current_message;
  //
  try {
    if (!db_data.is_empty) {
      current_message = await ctx.reply(
        '<b>'+escapeHtml(CHAT_NAME)+'</b>:\n' + db_data.list.map((v,i)=>{return (i+1)+'. '+'<code>' + escapeHtml(v.value) + '</code>'}).join('\n'),
        {
          reply_markup: {
              inline_keyboard: [[
                {text: "üìõ –æ—á–∏—Å—Ç–∏—Ç—å", callback_data: 'clear_action'},
                {text: "‚öô", callback_data: 'settings'},
                {text: "üñ•Ô∏è –ø–æ–∫–∞–∑–∞—Ç—å", callback_data: 'show_action'},
          ]]},
          parse_mode: 'html',
          reply_to_message_id: ctx.message?.message_id,
        });
    } else {
      current_message = await ctx.reply(
        '<b>'+escapeHtml(CHAT_NAME)+EMPTY_LIST_MES,
        {reply_markup: HELP_BTN, reply_to_message_id: ctx.message?.message_id, parse_mode: 'html'}
      );
     }
    db_data.set_last_list_message_id(current_message.message_id);
  } catch(err) {console.error('–ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ (command(/print):\n', err); }
});
///
//
///--part HELP
bot.action('help_action', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–ø–æ–º–æ—â—å"');
  help_helper(ctx);
});
//
bot.help(async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/help"');
  db_data.wait_for_name(false);
  db_data.wait_for_value_at(undefined);
  kill_panel_helper(ctx);
  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  db_data.set_last_list_message_id(message_id);
  help_helper(ctx, message_id);
});
//
async function help_helper(ctx, is_message_id = undefined, ms = 0) {
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
  
  await new Promise(r => setTimeout(r, ms));
  
  ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0,
    '–ö–∞–∫ –∑–¥–µ—Å—å –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç‚Åâ ü§® –ü—Ä–æ—Å—Ç–æ...\n\n1‚É£ –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤,\n –∏–ª–∏ ü§î –∑–∞–Ω–µ—Å–∏ –¥–µ–ª–æ –≤ to-do –ª–∏—Å—Ç,\n –∏–ª–∏ ü§ì –Ω–∞–∫–∏–¥–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫,\n –∏–ª–∏ üõ´ –∑–∞–ø–∏—à–∏ –≤–∞–∂–Ω—É—é –º–µ–ª–æ—á—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –≤ –¥–æ—Ä–æ–≥—É. \n\n2‚É£ –ö–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è, –æ—Ç–∫—Ä–æ–π —Å–ø–∏—Å–æ–∫ üëá (/list)\n\n3‚É£ –°–¥–µ–ª–∞–π \u{1FAF5} —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ç–∫–Ω–∏ –≤ –ø—É–Ω–∫—Ç. –û–Ω –∏—Å—á–µ–∑–Ω–µ—Ç üëç\n\n üëâ ‚úç üëá–ü–∏—à–∏ –∂–µ:',
    {reply_to_message_id: current_message_id})
  .catch(err=>console.error('/help –Ω–µ —Å–º–æ–≥ –ø–æ–º–æ—á—å, —Å–ø–æ—Ç–∫–Ω—É–ª—Å—è: ', err.name));
 }
///--
//
///--part KICK
bot.action('set_kick_mode_action', async (ctx) =>{
  //confirmation
  console.log('–Ω–∞–∂–∞–ª "–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º"');
  await ctx.telegram.editMessageText(
    ctx.chat.id, ctx.callbackQuery.message?.message_id, 0,
    `‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏: <b>—Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è</b> - —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∏–ª–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º?\n\n( <b>easy</b> ) –ø–æ –Ω–∞–∂–∞—Ç–∏—é - –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞\n( <b>confirmation</b> ) —Å –ø–æ–¥—Ç–≤–µ–∂–¥–µ–Ω–∏–µ–º - –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ\n\n>> —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ( ${db_data.kick_mode ? db_data.kick_mode : 'easy'} )\n>> –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:`,
    { parse_mode: 'html',
      reply_markup: {
      inline_keyboard: [
        [ {text:'—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º', callback_data: 'kick_mode confirmation'},
          {text:'–ø–æ –Ω–∞–∂–∞—Ç–∏—é', callback_data: 'kick_mode easy'}],
        [
          {text:'‚¨Ö –Ω–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings'}
        ],
    ]}}).catch(err=>console.error('–ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è', err.name))
});
//
bot.action(/^kick_mode \w+/, async (ctx)=>{
  console.log('–≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è... "'+ctx.callbackQuery.data+'"');
  try {
    let kick_mode = undefined;
    switch (ctx.callbackQuery.data.slice(10)) {
      case "confirmation":
        kick_mode = "confirmation";
        break;
      case "easy":
        kick_mode = "easy";
        break;
     }
    await db_data.set_kick_mode(kick_mode);
  } catch (err) {console.error('–Ω–µ —Å–º–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: ', err.name) }
  settings_panel_helper(ctx);
});
//
bot.action(/^kick \d+/, async (ctx) => {
  if (ctx.callbackQuery.message?.message_id == db_data.last_list_message_id) {
    const index = Number(ctx.callbackQuery.data.slice(5));
    console.log(`–Ω–∞–∂–∞–ª –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Ññ${index} "${db_data.list[index].value}"`);
    if (db_data.kick_mode === 'easy' || !db_data.kick_mode) {
      await kick_helper(ctx, index);
    } else {
      console.log('–Ω–µ–ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è, –Ω–µ –∏–∑–∏: ', db_data.kick_mode);
      ctx.answerCbQuery((db_data.list[index].value.length > 182 ? db_data.list[index].value.slice(0,182).concat('...') : db_data.list[index].value).concat(' —Ç–æ—á–Ω–æ —Å–¥–µ–ª–∞–Ω–æ?'))
      .catch(err=>console.error('–Ω–µ —Å–º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—à–∫—É –≤ action(/^kick /):\n',err));
      //—É–±–µ–¥–∏—Å—å, –ø–æ—Ç–æ–º –º–æ—á–∏
      await ctx.telegram.editMessageText(ctx.chat.id, ctx.callbackQuery.message?.message_id, 0,
        `‚úã ${escapeHtml(CHAT_NAME)}: —É–¥–∞–ª–∏—Ç—å "<b>${db_data.list[index].value}</b>" –∏–∑ —Å–ø–∏—Å–∫–∞?\n\n>> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          reply_markup: {
              inline_keyboard: [[{text:'‚¨Ö –æ—Ç–º–µ–Ω–∞', callback_data: 'show_action'}, {text: "üëç —Å–¥–µ–ª–∞–Ω–æ!", callback_data: `confirmed_kick_action ${index}`}]]
          },
          parse_mode: 'html',
          reply_to_message_id: ctx.message?.message_id,
        });
     }
  } else {
    ctx.answerCbQuery('ü§∑‚Äç‚ôÇÔ∏è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫');
  }
});
//
bot.action(/^confirmed_kick_action /, async (ctx)=>{
  const index = Number(ctx.callbackQuery.data.slice(22));
  if (db_data.list[index]) {
    await kick_helper(ctx, index);
  } else {
    console.warn('(!!!) CTX:\n',ctx,'\n--------\nINDEX=',index);
  }
});
//
async function kick_helper(ctx, index) {
  const answer = (db_data.list[index].value.length > 184 ? db_data.list[index].value.slice(0,184).concat('...') : db_data.list[index].value).concat(' - —Å–¥–µ–ª–∞–Ω–æ! üëç');
  await db_data.kick(index);
  ctx.answerCbQuery(answer).catch(err=>console.error('–Ω–µ —Å–º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—à–∫—É –≤ kick_helper:\n', err));
  show_list_helper(ctx, db_data.last_list_message_id, 0, answer);
 }
///--
//
///--part SETTINGS
bot.action('settings', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"');
  db_data.wait_for_name(false);
  db_data.wait_for_value_at(undefined);
  settings_panel_helper(ctx);
});
//
bot.settings(async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/settings"');
  db_data.wait_for_name(false);
  db_data.wait_for_value_at(undefined);
  kill_panel_helper(ctx);
  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  db_data.set_last_list_message_id(message_id);
  settings_panel_helper(ctx, message_id);
});
//
async function settings_panel_helper(ctx, is_message_id = undefined) {
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
  console.log('–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  try {
    //—É–±–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫
    if (current_message_id) {
      if (!db_data.is_empty && db_data.last_list_message_id && db_data.last_list_message_id != current_message_id) {
        ctx.telegram.editMessageText(
          ctx.chat.id, db_data.last_list_message_id, 0,
          db_data.list.map((v,i)=>{return (i+1)+'. '+'<code>'+escapeHtml(v.value)+'</code>'}).join('\n'), {parse_mode: 'html'})
        .catch(err=>console.error('–Ω–µ —Å–º–æ–≥ —É–±–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫'));
       }
     }
    //–æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    await ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0,
      '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏: <i>–∑–¥–µ—Å—å –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–ø–∏—Å–∫–∞</i>\n\n<b>–∏–º—è</b> - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞\n\n<b>—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å</b> - –≤–≤–æ–¥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑\n\n<b>—Ä–µ–∂–∏–º</b> - —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∏–ª–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º\n\n>> –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {reply_markup: {
        inline_keyboard: [
          [ {text: `–∏–º—è: ( ${escapeHtml(CHAT_NAME)} )`, callback_data: 'set_list_name_action'}],
          [ {text: `—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: ( ${db_data.delimiter === '\n' ? '‚èé' : db_data.delimiter} )`, callback_data: 'set_delimit_action'}],
          [ {text: `—Ä–µ–∂–∏–º: ( ${db_data.kick_mode ? db_data.kick_mode : 'easy'} )`, callback_data: 'set_kick_mode_action'}],
          [ {text:'‚¨Ö –∫ —Å–ø–∏—Å–∫—É', callback_data: 'show_action'} ],
        ]},
        parse_mode: 'html'
      }
    ).catch(err=>console.error('—á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫: ', err.name));
  } catch(err) {console.error('–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è', err) }    
 }
//
///--list name actions
bot.action('set_list_name_action', async (ctx)=>{
  console.log('–Ω–∞–∂–∞–ª "–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è"');
  await ctx.telegram.editMessageText(
    ctx.chat.id, ctx.callbackQuery.message?.message_id, 0,
    `‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞\n\n>> —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <s>${escapeHtml(CHAT_NAME)}</s>\n>> –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <i>(–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤)</i>:`,
    { parse_mode: 'html',
      reply_markup: {
      inline_keyboard: [
        [ {text:'‚¨Ö –Ω–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings'}],
    ]}}).catch(err=>console.error('–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è', err));
  await db_data.wait_for_name(true);
});
//
///--delimiter actions
bot.action('set_delimit_action', async (ctx)=> {
  console.log('–Ω–∞–∂–∞–ª "—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"');
  await ctx.telegram.editMessageText(
    ctx.chat.id, ctx.callbackQuery.message?.message_id, 0,
    `‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å...\n\n–ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–¥–∞–Ω, –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥: "—Ö–ª–µ–±, –ª—É–∫, –º–∞—Å–ª–æ" –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –∂–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "–∑–∞–ø—è—Ç–∞—è", —Ç–æ —Å–ø–∏—Å–æ–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∫–∞–∂–¥—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ: "—Ö–ª–µ–±", "–ª—É–∫" –∏ "–º–∞—Å–ª–æ".\n\n>> —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: ( ${db_data.delimiter === '\n' ? '‚èé' : db_data.delimiter} )\n>> –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:`,
    { parse_mode: 'html',
      reply_markup: {
      inline_keyboard: [
        [ {text:'( –±–µ–∑ ): –∫–∞–∂–¥—ã–π –≤–≤–æ–¥ - –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å', callback_data: 'delimit null'}],
        [ {text:'( ‚èé ) —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏', callback_data: 'delimit enter'}],
        [ {text:'( , ) –∑–∞–ø—è—Ç–∞—è', callback_data: 'delimit comma'},
          {text:'( ; ) —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π', callback_data: 'delimit semicolon'}
        ],
        [ {text:'‚¨Ö –Ω–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings'}],
    ]}}).catch(err=>console.error('–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è', err));
});
//
bot.action(/^delimit \w+/, async (ctx)=>{
  console.log('–≤—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å... "'+ctx.callbackQuery.data+'"');
  try {
    let delimiter = null;
    switch (ctx.callbackQuery.data.slice(8)) {
      case "comma":
        delimiter = ",";
        break;
      case "semicolon":
        delimiter = ";";
        break;
      case "enter":
        delimiter = "\n";
        break;
     }
    await db_data.set_delimiter(delimiter);
  } catch (err) {console.error('–Ω–µ —Å–º–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: ', err.name) }

  settings_panel_helper(ctx);
});
///--
//
///--part CLEAR
bot.action('clear_action', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–æ—á–∏—Å—Ç–∏—Ç—å"');
  clear_list_helper(ctx);
});
//
bot.action('confirmed_clear_action', async (ctx)=>{
  console.log('–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—á–∏—Å—Ç–∫—É —Å–ø–∏—Å–∫–∞"');
  ctx.answerCbQuery('ü§≤ —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω!');
  await db_data.clear_list();
  ctx.editMessageText('<b>'+escapeHtml(CHAT_NAME)+'</b>: ü§≤ <i>—Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω!</i>', {reply_markup: HELP_BTN, parse_mode: 'html'})
  .catch(err=>console.error('–æ—à–∏–±–∫–∞ –≤ confirmed_clear_action:\n',err));
});
// –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
bot.command('clear', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/clear"');
  db_data.wait_for_name(false);
  db_data.wait_for_value_at(undefined);
  kill_panel_helper(ctx);
  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  db_data.set_last_list_message_id(message_id);
  clear_list_helper(ctx, message_id);
});
//
async function clear_list_helper(ctx, is_message_id = undefined, ms = 0) {
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
  //—É–±–µ–¥–∏—Å—å, –ø–æ—Ç–æ–º –º–æ—á–∏
  await ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0,
    '<b>'+escapeHtml(CHAT_NAME)+'</b>: üò± –í–ï–°–¨ –°–ü–ò–°–û–ö –ë–£–î–ï–¢ –£–î–ê–õ–ï–ù!\n\n>> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
    {
      reply_markup: {
          inline_keyboard: [[{text:'‚¨Ö –æ—Ç–º–µ–Ω–∞', callback_data: 'show_action'}, {text: "üìõ –æ—á–∏—Å—Ç–∏—Ç—å", callback_data: 'confirmed_clear_action'}]]
      },
      parse_mode: 'html',
      reply_to_message_id: ctx.message?.message_id,
    });
 }
///--
//
///--UKNOWN action
bot.on('callback_query', async (ctx)=>{
  console.warn('–Ω–µ–∑–Ω–∞–∫–æ–º–∞—è –∫–Ω–æ–ø–∫–∞: ', ctx.callbackQuery?.data)
});
///--
//
///--ON MESSAGES –æ—Ç–≤–µ—Ç—ã –Ω–∞ –°–û–û–ë–©–ï–ù–ò–Ø
// –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã
bot.on(message('sticker'), async (ctx) => {
  const sticker_value = '—Å—Ç–∏–∫–µ—Ä: '+ ctx.message.sticker.set_name +': '+ ctx.message.sticker.emoji;
  console.log('STIKER!\n'+sticker_value);
  kill_panel_helper(ctx);
  const answer = await db_data.insert(sticker_value) ? `"${sticker_value}" –¥–æ–±–∞–≤–ª–µ–Ω–æ üëç` : `ü§∑‚Äç‚ôÇÔ∏è "${sticker_value}" —É–∂–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ`;

  const {message_id} =  await ctx.reply('...', {reply_to_message_id: ctx.message?.message_id});
  db_data.set_last_list_message_id(message_id);
  show_list_helper(ctx, message_id, 0, answer);
});
//
///--—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on(message('text'), async (ctx) => {
  const text = ctx.message?.text;
  kill_panel_helper(ctx);
  //console.log(`–≤ ${JSON.stringify(ctx.chat,null,1)} –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);
  try {
    //–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    if (db_data.wait_for_value_index && db_data.wait_for_value_index >= 0) {
      console.log('–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
      const answer = await db_data.update_value_at_wait_for_value_index(text) ? `"${text}" –∏–∑–º–µ–Ω–µ–Ω–æ üëç` : `ü§∑‚Äç‚ôÇÔ∏è "${text}" —É–∂–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ`;
      const { message_id } = await ctx.reply('...‚úç...', {reply_to_message_id: ctx.message?.message_id});
      db_data.set_last_list_message_id(message_id);
      db_data.wait_for_value_at(undefined);
      return show_list_helper(ctx, message_id, 0, answer);
    //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–∞
    } else if (db_data.list_name.wait_for_name) {
      const list_name25 = text.slice(0, 25);
      await db_data.set_list_name(list_name25);
      CHAT_NAME = list_name25;
      await db_data.wait_for_name(false);
      const { message_id } = await ctx.reply('...üëç...', {reply_to_message_id: ctx.message?.message_id});
      await db_data.set_last_list_message_id(message_id);
      return settings_panel_helper(ctx, message_id);
    //–≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (–Ω–∞ @_ –∏ @–∏–º—è_–±–æ—Ç–∞_)
    //type of chat, can be either ‚Äúprivate‚Äù, ‚Äúgroup‚Äù, ‚Äúsupergroup‚Äù or ‚Äúchannel‚Äù
    } else if (ctx.chat.type != 'private') {
      let answer;
      const a = text.slice(0,process.env.BOT_NAME.length + 2);
      const b = `@${process.env.BOT_NAME} `;
      const r = a === b;

      //@TODO: HTML_escape?
      if (text.slice(0,2) === '@ ') { 
        answer = text.slice(2);
      } else if (text.slice(0,process.env.BOT_NAME.length + 2) === `@${process.env.BOT_NAME} `) {
          answer = text.slice(process.env.BOT_NAME.length + 2)
      }

      if (answer) {
        if (answer.slice(0,1) === '/') {
          //–∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –∏–≥–Ω–æ—Ä —Å –ø–æ—É—á–µ–Ω–∏–µ–º
          const { message_id } = await ctx.reply(`–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É, –ø–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é ( / ) –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ä—è–¥–∫–µ: ${answer}@${process.env.BOT_NAME}`);
          return db_data.set_last_list_message_id(message_id);
        } else {
          console.log('–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, –ø–∏—à–µ–º: ',answer);
          answer = await db_data.insert(answer) ? `"${answer}" –¥–æ–±–∞–≤–ª–µ–Ω–æ üëç` : `ü§∑‚Äç‚ôÇÔ∏è "${answer}" —É–∂–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ`;
          const { message_id } = await ctx.reply('...‚úç...', {reply_to_message_id: ctx.message?.message_id});
          await db_data.set_last_list_message_id(message_id);
          return show_list_helper(ctx, message_id, 0, answer);
         }
      } else {
        console.log('–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, –Ω–µ –ø–æ–¥—Å–ª—É—à–∏–∞–≤–µ–º...');
      }
    //–ª—é–±–æ–ï —Å–ª–æ–≤–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–ø–∏—Å–æ–∫, –∫—Ä–æ–º–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤—ã—à–µ, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤
    } else if ((/[^\/]/).test(text[0])) {
      const res = await db_data.insert(text);
      const answer = res ? `"${text}" –¥–æ–±–∞–≤–ª–µ–Ω–æ üëç` : `ü§∑‚Äç‚ôÇÔ∏è "${text}" —É–∂–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ`;
      console.log(`${answer}`);
      const { message_id } = await ctx.reply('...‚úç...', {reply_to_message_id: ctx.message?.message_id});
      await db_data.set_last_list_message_id(message_id);
      return show_list_helper(ctx, message_id, 0, answer);
    //–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ - –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ
    } else {
      const { message_id } = await ctx.reply(`–Ω–µ–∑–Ω–∞–∫–æ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§∑‚Äç‚ôÇÔ∏è`, {reply_to_message_id: ctx.message?.message_id} );
      return await db_data.set_last_list_message_id(message_id);
    }
  } catch(err) { console.error('–ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',err);  }
});
///--
//
///--–§–ò–ù–ê–õ. –°—Ç–∞—Ä—Ç—É–µ–º...
// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${ctx.updateType}`, err)
});
// –∑–∞–ø—É—Å–∫
bot.launch();
// enable graceful stop
process.once('SIGINT', () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  bot.stop('SIGTERM');
});