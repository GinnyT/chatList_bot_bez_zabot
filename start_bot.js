require('dotenv').config({ path: `${process.env.NODE_ENV}.env` });

//const Chat = require('./chat_data');          //–¥–∞–Ω–Ω—ã–µ –≤ Global
const DATA = require('./chat_data_in_files'); //–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
const { Telegraf } = require('telegraf');
const { message } = require('telegraf/filters');
//@TODO: –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –≤—ã–∑–≤–∞—Ç—å –µ–¥–∏–Ω–æ–∂–¥—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getMe() —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞, –Ω–æ –Ω–µ –≥—Ä—É–∑–∏—Ç—å –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –≤–Ω—É—Ç—Ä–∏ use. 
//–ø–æ–∫–∞ —Ä–µ—à–∏–ª –∑–∞—à–∏—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
const bot = new Telegraf(process.env.TOKEN);
console.log('–°—Ç–∞—Ä—Ç—É–µ—Ç –±–æ—Ç: ',process.env.USER_NAME)

//–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
//@TODO: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å - –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ö–µ–ª–ø–µ—Ä—ã
let counter = 0;
let data = {};

let CHAT_NAME = '–°–ø–∏—Å–æ–∫';
const LIST_BTN = {inline_keyboard: [[{text: CHAT_NAME, callback_data: 'list'}]]};
const HELP_BTN = {inline_keyboard: [[{text: "–ø–æ–º–æ—â—å", callback_data: 'help'}]]};
const LIST_N_HELP_BTN = {inline_keyboard: [[LIST_BTN.inline_keyboard[0][0], HELP_BTN.inline_keyboard[0][0]]]}
const LOAD_EMJ = '\u{1F90C}';

// HELPERs
const escapeHtml = (unsafe) => {
  return unsafe.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll('"', '&quot;').replaceAll("'", '&#039;');
};
const escapeAfew = (text) => {
  ['<','>'].forEach(char => (text = text.replaceAll(char, '\\'+char)));
  return text;
};


//–æ–±–æ–ª–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.use(async (ctx, next) => {

  const start_time = new Date();
  //const getMe = await bot.telegram.getMe((res)=>{return res});
  //console.log('Bot GetMe=\n',JSON.stringify(getMe,null,1));

  console.log(`---------------\n${counter++}) –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –∏–∑ —á–∞—Ç–∞: ${ctx.chat?.id} –æ—Ç ${ctx.from.username} —Ç–∏–ø: ${ctx.updateType}`);
  
  if (ctx.updateType === 'inline_query') {
    console.warn('inline_query (–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)=\n',JSON.stringify(ctx.inlineQuery,null,1));
  //
  } else {
    data = await DATA.init(ctx.chat?.id);
    CHAT_NAME = data.list_name.name;
    //
    await next();
    await data.update();
  };
  const ms = new Date() - start_time;
  console.log(`---------------–≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${ms}`);
});

//                  –í–í–û–î–ò–ú–´–ï –ö–û–ú–ê–ù–î–´
bot.telegram.setMyCommands([
  {
    command: 'help',
    description: '–ø–æ–º–æ—á—å? ü§î',
  },
  {
    command: 'list',
    description: '–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ üí¨',
  },
  { 
    command: 'print',
    description: '–≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞ "–ø–µ—á–∞—Ç—å" –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ üñ®',
  },
  /* {
    command: 'clear',
    description: '–æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ üìõ',
  }, */
  {
    command: 'settings',
    description: '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô',
  },
], /* {scope: {type: 'all_private_chats'}}, 'ru' */);


// –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç
bot.command('start', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/start"');
  data.wait_for_name(false);

  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! üëã –ü–æ–º–æ—á—å –∏–ª–∏ —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É? üëá‚úç', {reply_to_message_id: ctx.message?.message_id} )
  .catch(err=>console.error(err));

  const {message_id} = await ctx.reply('ü§î');
  show_list(ctx, message_id, 0, '<i>—Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω!</i> –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üòò');
});

// –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ 
bot.command('list', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/list"');
  data.wait_for_name(false);

  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  show_list(ctx, message_id, 0, 'üëá <i>—Ç–µ–∫—É—â–∏–π</i>');
});

// –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
bot.command('clear', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/clear"');
  data.wait_for_name(false);

  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  clear_list(ctx, message_id);
});

//–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
bot.help(async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/help"');
  data.wait_for_name(false);

  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  help(ctx, message_id);
});

//–≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–µ—á–∞—Ç—å
bot.command('print', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/print"');
  data.wait_for_name(false);
  //
  if (!data.is_empty) {
    ctx.reply(escapeHtml(CHAT_NAME) + ':\n' + data.list.map((v,i)=>{return (i+1)+'. '+'<code>' + escapeHtml(v) + '</code>'}).join('\n'),
    {reply_to_message_id: ctx.message?.message_id, parse_mode: 'html'})
    .catch(err=>console.error('–ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ', err));
  } else {
    ctx.reply(escapeHtml(CHAT_NAME) + ': ü§∑‚Äç‚ôÇÔ∏è <i>—Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç</i>', {reply_markup: HELP_BTN, reply_to_message_id: ctx.message?.message_id, parse_mode: 'html'});
  };

});

//–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
bot.settings(async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/settings"');
  data.wait_for_name(false);
  
  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  settings_panel(ctx, message_id);
});

//                –§–£–ù–ö–¶–ò–ò. –û–ë–†–ê–ë–û–¢–ö–ê. –ü–æ–≤—Ç–æ—Ä—è–µ–º—ã–π –∫–æ–¥

async function show_list(ctx, is_message_id = undefined, ms = 0, action_text='') {
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
  console.log('–ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ show_list.\n data.last_list_message_id=',data.last_list_message_id,'\ncurrent_message_id=',current_message_id);
  try {
    if (!data.is_empty) {
      //—É–±–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫
      if (current_message_id) {
        if (data.last_list_message_id && data.last_list_message_id != current_message_id) {
          ctx.telegram.editMessageText(ctx.chat.id, data.last_list_message_id, 0,
            data.list.map((v,i)=>{return (i+1) + '. ' + '<code>' + escapeHtml(v) + '</code>'}).join('\n'),
            {parse_mode: 'html'})
          .catch(err=>console.error('–Ω–µ —Å–º–æ–≥ —É–±–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫'));
        };
        //
        data.set_last_list_message_id(current_message_id);
      };

      await new Promise(r => setTimeout(r, ms));
      //–æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
      await ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0,
        escapeHtml(CHAT_NAME) + ': '+escapeHtml(action_text),
        {
          reply_markup: {
              inline_keyboard: data.list.map((element, index)=>{return [{text: element, callback_data: `kick ${index}`}]})
              .concat([[{text: "üìõ –æ—á–∏—Å—Ç–∏—Ç—å", callback_data: 'clear'},{text: "‚öô", callback_data: 'settings'}, {text: "üñ® –≤—ã–≤–µ—Å—Ç–∏", callback_data: 'print'}, ]])
          },
          parse_mode: 'html',
          reply_to_message_id: ctx.message?.message_id,
        });
    } else {
      await ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0,
        escapeHtml(CHAT_NAME) + ': ü§∑‚Äç‚ôÇÔ∏è <i>—Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç</i>',
        {reply_markup: HELP_BTN, reply_to_message_id: ctx.message?.message_id, parse_mode: 'html'});
    };
  } catch(err) {console.error('—Å–ø–∏—Å–æ–∫ –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è', err)};    
  
};

async function help(ctx, is_message_id = undefined, ms = 0) {
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
  
  await new Promise(r => setTimeout(r, ms));
  
  ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0,
    '–ö–∞–∫ –∑–¥–µ—Å—å –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç‚Åâ ü§® –ü—Ä–æ—Å—Ç–æ...\n\n1‚É£ –ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤,\n –∏–ª–∏ ü§î –∑–∞–Ω–µ—Å–∏ –¥–µ–ª–æ –≤ to-do –ª–∏—Å—Ç,\n –∏–ª–∏ ü§ì –Ω–∞–∫–∏–¥–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫,\n –∏–ª–∏ üõ´ –∑–∞–ø–∏—à–∏ –≤–∞–∂–Ω—É—é –º–µ–ª–æ—á—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –≤ –¥–æ—Ä–æ–≥—É. \n\n2‚É£ –ö–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è, –æ—Ç–∫—Ä–æ–π —Å–ø–∏—Å–æ–∫ üëá (/list)\n\n3‚É£ –°–¥–µ–ª–∞–π \u{1FAF5} —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ç–∫–Ω–∏ –≤ –ø—É–Ω–∫—Ç. –û–Ω –∏—Å—á–µ–∑–Ω–µ—Ç üëç\n\n üëâ ‚úç üëá–ü–∏—à–∏ –∂–µ:',
    {reply_to_message_id: current_message_id})
  .catch(err=>console.error('/help –Ω–µ —Å–º–æ–≥ –ø–æ–º–æ—á—å, —Å–ø–æ—Ç–∫–Ω—É–ª—Å—è: ', err.name));
};

async function clear_list(ctx, is_message_id = undefined, ms = 0) {
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
  await data.clear_list();
  await new Promise(r => setTimeout(r, ms));
  //ctx.answerCbQuery('ü§≤ —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω!');
  ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0, escapeHtml(CHAT_NAME) + ': ü§≤ <i>—Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω!</i>', {reply_markup: HELP_BTN, parse_mode: 'html'});
};

async function settings_panel(ctx, is_message_id = undefined) {
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
  console.log('–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  try {
    //—É–±–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫
    if (current_message_id) {
      if (!data.is_empty && data.last_list_message_id && data.last_list_message_id != current_message_id) {
        ctx.telegram.editMessageText(
          ctx.chat.id, data.last_list_message_id, 0,
          data.list.map((v,i)=>{return (i+1)+'. '+'<code>'+escapeHtml(v)+'</code>'}).join('\n'), {parse_mode: 'html'})
        .catch(err=>console.error('–Ω–µ —Å–º–æ–≥ —É–±–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫'));
      };
      //
      data.set_last_list_message_id(current_message_id);
    };

    //–æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    await ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0, '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:',
      {reply_markup: {
        inline_keyboard: [
          [ {text: "–ò–ú–Ø: ("+CHAT_NAME+")", callback_data: 'set_list_name'},
            {text: "–†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨: (null)", callback_data: 'set_delimit'},],
          [
            {text: "–†–ï–ñ–ò–ú: (—Å—Ä–∞–∑—É)", callback_data: 'done_mode'}
          ],
          [
            {text:'‚¨Ö –ö –°–ü–ò–°–ö–£', callback_data: 'close_settings'}
          ],
    ]}});
  } catch(err) {console.error('–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è', err)};    
};

//            –ö–ù–û–ü–ö–ò. –æ—Ç–≤–µ—Ç—ã –Ω–∞ CallBackQuery

bot.action('set_list_name', async (ctx)=>{
  console.log('–Ω–∞–∂–∞–ª "–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è"');
  await ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è "' + escapeHtml(CHAT_NAME) + '" (<i>–¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤</i>):',{parse_mode:'html'});
  data.wait_for_name(true);
});

bot.action('close_settings', async (ctx)=>{show_list(ctx)});

bot.action('clear', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–æ—á–∏—Å—Ç–∏—Ç—å"');
  clear_list(ctx);
});

bot.action('help', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–ø–æ–º–æ—â—å"');
  help(ctx);
});

bot.action('print', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–≤—ã–≤–µ—Å—Ç–∏"');
  //
  if (!data.is_empty) {
    ctx.answerCbQuery('–≥–æ—Ç–æ–≤–æ! üñ® –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å...');
    ctx.reply(escapeHtml(CHAT_NAME) + ':\n'+data.list.map((v,i)=>{return (i+1)+'. '+'<code>' + escapeHtml(v) + '</code>'}).join('\n'), {parse_mode: 'html'})
    .catch(err=>console.error('–ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ', err));
  } else {
    ctx.answerCbQuery(CHAT_NAME+': ü§∑‚Äç‚ôÇÔ∏è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç...');
  };
});

bot.action('settings', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"');
  settings_panel(ctx);
  //ctx.reply('/settings');
});

bot.on('callback_query', async (ctx)=>{
  //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ, –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É –º–∞—Å—Å–∏–≤–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (ctx.callbackQuery.data.slice(0,4) == 'kick' && ctx.callbackQuery.message?.message_id == data.last_list_message_id) {
    const index = Number(ctx.callbackQuery.data.slice(5));
    let item = data.list[index];
    console.log(`–Ω–∞–∂–∞–ª –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Ññ${index} "${item}"`);
    if (index > -1) {
      await data.kick(index);
      await show_list(ctx, data.last_list_message_id, 0, `"<b>${item}</b>" - —Å–¥–µ–ª–∞–Ω–æ üí™`);
      ctx.answerCbQuery(item ? `${item} - —Å–¥–µ–ª–∞–Ω–æ! üëå` : 'ü§∑‚Äç‚ôÇÔ∏è –Ω–µ –Ω–∞—à–µ–ª –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ');
    };
    //–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å:
    if (data.is_empty) {
        ctx.answerCbQuery('ü§∑‚Äç‚ôÇÔ∏è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç');
        ctx.editMessageText(escapeHtml(CHAT_NAME) + ': ü§∑‚Äç‚ôÇÔ∏è <i>—Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç</i>', {reply_markup: HELP_BTN, parse_mode: 'html'});
    };
  } else if (ctx.callbackQuery.message?.message_id != data.last_list_message_id) {
    ctx.answerCbQuery('ü§∑‚Äç‚ôÇÔ∏è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫');
  };
});

/* bot.on('inline_query', async (ctx) => {
  console.log('INLINE QUERY:', inlineQuery);
  ctx.answerInlineQuery('YOHUUU!')
}); */

//            –û—Ç–≤–µ—Ç—ã –Ω–∞ –°–û–û–ë–©–ï–ù–ò–Ø
//–æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã
bot.on(message('sticker'), async (ctx) => {
  const sticker_value = '—Å—Ç–∏–∫–µ—Ä: '+ ctx.message.sticker.set_name +': '+ ctx.message.sticker.emoji;
  //console.log('STIKER!\n'+JSON.stringify(ctx.message,null,1));
  console.log('STIKER!\n'+sticker_value);

  const answer = await data.insert(sticker_value) ? `"<b>${sticker_value}</b>" –¥–æ–±–∞–≤–ª–µ–Ω–æ üëç` : `ü§∑‚Äç‚ôÇÔ∏è "<b>${sticker_value}</b>" —É–∂–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ`;

  const {message_id} =  await ctx.reply('üò±', {reply_to_message_id: ctx.message?.message_id});
  show_list(ctx, message_id, 0, answer);
});

//–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –Ω–∞—Å —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç
/* bot.hears( `@${process.env.USER_NAME}`, async (ctx)=>{
  console.log('–ø—É—Å—Ç–∞—è —Å–æ–±–∞–∫–∞ –∏–ª–∏ –∏–º—è –±–æ—Ç–∞:\n',JSON.stringify(ctx.message,null,1));
}); */

//–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
bot.on(message('text'), async (ctx) => {
  const text = ctx.message?.text;

  console.log(`–≤ ${JSON.stringify(ctx.chat,null,1)} –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);

  try {
    //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–∞
    if (data.list_name.wait_for_name) {
      const list_name15 = text.slice(0, 15);
      await data.set_list_name(list_name15);
      CHAT_NAME = list_name15;
      data.wait_for_name(false);
      const { message_id } = await ctx.reply('üëç', {reply_to_message_id: ctx.message?.message_id});
      return settings_panel(ctx, message_id);

    //–≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (–Ω–∞ @_ –∏ @–∏–º—è_–±–æ—Ç–∞_)
    } else if (ctx.chat.type != 'private') {
      let answer;
      //@TODO: HTML_escape
      if (text.slice(0,2) === '@ ') { 
        answer = text.slice(2);
      } else if (text.slice(0,process.env.USER_NAME.length+1) === `@${process.env.USER_NAME}`) {
        answer = text.slice(process.env.USER_NAME.length + 1)
      };

      if (answer) {
        console.log('–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, –ø–∏—à–µ–º: ',answer);
        answer = await data.insert(answer) ? `"<b>${answer}</b>" –¥–æ–±–∞–≤–ª–µ–Ω–æ üëç` : `ü§∑‚Äç‚ôÇÔ∏è "<b>${answer}</b>" —É–∂–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ`;
        const { message_id } = await ctx.reply('‚úç', {reply_to_message_id: ctx.message?.message_id});
        return show_list(ctx, message_id, 0, answer);
      } else {
        console.log('–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, –Ω–µ –ø–æ–¥—Å–ª—É—à–∏–∞–≤–µ–º...');
      };

    //–ª—é–±–æ–ï —Å–ª–æ–≤–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–ø–∏—Å–æ–∫, –∫—Ä–æ–º–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤—ã—à–µ, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤
    } else if ((/[^\/]/).test(text[0])) {
      

      const answer = escapeHtml(await data.insert(text)) ? `"<b>${text}</b>" –¥–æ–±–∞–≤–ª–µ–Ω–æ üëç` : `ü§∑‚Äç‚ôÇÔ∏è "<b>${text}</b>" —É–∂–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ`;
      const { message_id } = await ctx.reply('‚úç', {reply_to_message_id: ctx.message?.message_id});
      return show_list(ctx, message_id, 0, answer);
    
    //–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ - –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ
    } else {
      const { message_id } = await ctx.reply(`ü§∑‚Äç‚ôÇÔ∏è –Ω–µ–∑–Ω–∞–∫–æ–º–∞—è –∫–æ–º–∞–Ω–¥–∞`, {reply_to_message_id: ctx.message?.message_id} );
    };
  } catch(err) { console.error('–ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',err); };
});

//        –§–ò–ù–ê–õ. –°—Ç–∞—Ä—Ç—É–µ–º...
//–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${ctx.updateType}`, err)
});

//–∑–∞–ø—É—Å–∫
bot.launch();

// Enable graceful stop
process.once('SIGINT', () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  console.log('–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
});