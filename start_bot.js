/*
@TODO: 
  //—É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ç–æ–ª–∫–∞—Ç—å –ø—É—à–∏, –∫–∞–∫ –≤ answerCallbackQuery!
  //–≤ bot.start –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å, –≤—ã–≤–æ–¥–∏—Ç—å
*/


require('dotenv').config();
//const Chat = require('./chat_data');          //–¥–∞–Ω–Ω—ã–µ –≤ Global
const DATA = require('./chat_data_in_files'); //–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
const { Telegraf, Markup } = require('telegraf');
const { message } = require('telegraf/filters')
const bot = new Telegraf(process.env.TOKEN);

//–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
let counter = 0;
//let chat = {}; //–æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –≤ bot.use —Ç.–∫. –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
let data = {};

const SHOP_BTN = {inline_keyboard: [[{text: "–®–æ–ø–∏—Ç—å", callback_data: 'shop'}]]};
const HELP_BTN = {inline_keyboard: [[{text: "–ø–æ–º–æ—â—å", callback_data: 'help'}]]};
const LOAD_EMJ = '\u{1F90C}';
const SHOP_N_HELP_BTN = {inline_keyboard: [[
  {text: "–®–æ–ø–∏—Ç—å", callback_data: 'shop'},
  {text: "–ü–æ–º–æ—â—å", callback_data: 'help'}]
]};
const CHAT_NAME = '–°–ø–∏—Å–æ–∫'


//–æ–±–æ–ª–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.use(async (ctx, next) => {
  const start_time = new Date();
  console.log(`---------------\n${counter++}) –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –∏–∑ —á–∞—Ç–∞: ${ctx.chat.id} –æ—Ç ${ctx.from.username} —Ç–∏–ø: ${ctx.updateType}`);
  
  data = new DATA(ctx.chat.id);
  
  await next();
  
  await data.update();

  const ms = new Date() - start_time;
  console.log(`---------------–≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${ms}`);
})

//                  –ö–æ–º–∞–Ω–¥—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
// –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç
bot.start(async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/start"');
  await start(ctx);
});

/* // –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞
bot.command('quit', async (ctx) => {
  try {
    await ctx.leaveChat();
    ctx.reply('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç');
  }  catch(err) {
    console.error(`–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${ctx.updateType}`, err);
    ctx.reply('–Ω–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç');
  };
}); */

//TODO: –ë–ê–ì! –Ω–∞–ø–∏—Å–∞–ª –≤ —á–∞—Ç–µ –∏ –≤—ã—à—â–∏–± —Å–∏—Å—Ç–µ–º—É
// –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ 
bot.command('shop', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/shop"');
  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  shop_list(ctx, message_id, 0, 'üëá —Ç–µ–∫—É—â–∏–π');
});

// –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
bot.command('clear', async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/clear"');
  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  clear_list(ctx, message_id);
});

//–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
bot.help(async (ctx) => {
  console.log('–≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É "/help"');
  const {message_id} =  await ctx.reply(LOAD_EMJ, {reply_to_message_id: ctx.message?.message_id});
  help(ctx, message_id);
});

//                –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
//@TODO:
//  –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∂–∏ —Å—Ä–∞–∑—É

async function shop_list(ctx, is_message_id = undefined, ms = 0, action_text='') {
  
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;

  console.log('–ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ shop_list.\n data.current_shop_list=',data.current_shop_list,'\ncurrent_message_id=',current_message_id);
  
  try {
    if (!data.is_empty) {
      //—É–±–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫
      if (current_message_id) {
        if (data.current_shop_list && data.current_shop_list != current_message_id) {
          ctx.telegram.editMessageText(ctx.chat.id, data.current_shop_list, 0, data.list_str)
          .catch(err=>console.error('–Ω–µ —Å–º–æ–≥ —É–±–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫'));
        };
        //
        data.set_current_shop_list(current_message_id);
      };

      await new Promise(r => setTimeout(r, ms));
      //–æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
      await ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0, CHAT_NAME+': <code>'+action_text+'</code>',
        {
          reply_markup: {
              inline_keyboard: data.list.map((element, index)=>{return [{text: element, callback_data: `kick ${index}`}]})
              .concat([[{text: "üìõ –æ—á–∏—Å—Ç–∏—Ç—å", callback_data: 'clear'},{text: "‚öô", callback_data: 'settings'}, {text: "üñ® –≤—ã–≤–µ—Å—Ç–∏", callback_data: 'print'}, ]])
          },
          parse_mode: 'html',
          reply_to_message_id: ctx.message?.message_id,
        });
    } else {
      await ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0, 'ü§∑‚Äç‚ôÇÔ∏è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç', {reply_markup: HELP_BTN, reply_to_message_id: ctx.message?.message_id});
    };
  } catch(err) {console.error('—Å–ø–∏—Å–æ–∫ –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è', err)};    
  
};

async function help(ctx, is_message_id = undefined, ms = 0) {
  const current_message_id = is_message_id || ctx.message?.message_id || ctx.callbackQuery?.message?.message_id;
  
  await new Promise(r => setTimeout(r, ms));
  
  ctx.telegram.editMessageText(ctx.chat.id, current_message_id, 0, '–ö–∞–∫ –∑–¥–µ—Å—å –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç‚Åâ ü§® –ü—Ä–æ—Å—Ç–æ...\n\n–ü–†–û–°–¢–û\nüî≤ 1. –Ω–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤,\n–ò–õ–ò ü§î –∑–∞–Ω–µ—Å–∏ –¥–µ–ª–æ –≤ ToDo-–ª–∏—Å—Ç,\n–ò–õ–ò ü§ì –Ω–∞–∫–∏–¥–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫,\n–ò–õ–ò üõ´ –∑–∞–ø–∏—à–∏ –≤–∞–∂–Ω—É—é –º–µ–ª–æ—á—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –≤ –¥–æ—Ä–æ–≥—É. \n\nüî≤ 2. –ö–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è, –æ—Ç–∫—Ä–æ–π —Å–ø–∏—Å–æ–∫ üëá (/shop)\n\nüî≤ 3. –°–¥–µ–ª–∞–π \u{1FAF5} —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ç–∫–Ω–∏ –≤ –ø—É–Ω–∫—Ç.\n–û–Ω –∏—Å—á–µ–∑–Ω–µ—Ç üëç\n\n üëâ ‚úç üëá–ü–∏—à–∏ –∂–µ:', {reply_to_message_id: current_message_id}).catch(err=>console.error('/help –Ω–µ —Å–º–æ–≥ –ø–æ–º–æ—á—å, —Å–ø–æ—Ç–∫–Ω—É–ª—Å—è: ', err.name));
};

async function clear_list(ctx) {
  await data.clear_list();
  ctx.editMessageText('ü§≤ —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω!', {reply_markup: HELP_BTN});
}

async function start(ctx) {
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! üëã\n–ü–æ–º–æ—á—å –∏–ª–∏ —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É? üëá‚úç', {/*reply_markup: HELP_BTN,  */ reply_to_message_id: ctx.message?.message_id} )
  .catch((err)=>{console.error('–∫–Ω–æ–∫–∞ —É—Ö', err)});
  const {message_id} = await ctx.reply('ü§î');
  shop_list(ctx, message_id, 0, '—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º\\! üòò');
}

//            –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫

/* bot.action('shop', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "—à–æ–ø–∏—Ç—å"');
  await shop_list(ctx);
}); */

bot.action('clear', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–æ—á–∏—Å—Ç–∏—Ç—å"');
  await clear_list(ctx);
});

bot.action('start', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "—Å–Ω–∞—á–∞–ª–∞"');
  await start(ctx);
});

bot.action('help', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–ø–æ–º–æ—â—å"');
  await help(ctx);
});

bot.action('print', async (ctx) => {
  console.log('–Ω–∞–∂–∞–ª "–≤—ã–≤–µ—Å—Ç–∏"');
  //
  if (!data.is_empty) {
    ctx.answerCbQuery('–≥–æ—Ç–æ–≤–æ! üñ® –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å...');
  
    ctx.reply(CHAT_NAME+':\n'+data.list.map((v,i)=>{return (i+1)+') '+'<code>'+v+'</code>'}).join('\n'), {parse_mode: 'html'})
    .catch(err=>console.error('–ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ', err));
  
  } else {
    ctx.answerCbQuery('ü§∑‚Äç‚ôÇÔ∏è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç...', true);
  };
});

//–æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã
bot.on(message('sticker'), async (ctx) => {
  const {message_id} =  await ctx.reply('...üò±...', {reply_to_message_id: ctx.message?.message_id});
  //@TODO: –∑–¥–µ—Å—å –Ω–∞–¥–æ —É–±–∏—Ç—å –ø—Ä–æ—à–ª—ã–π —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–≤—Ä–∞—Ç–∏–≤ –µ–≥–æ –≤ list_str
  shop_list(ctx, message_id, 0, 'ü§ö —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ –∑–∞–Ω–æ—à—É...');
});

/* //–æ—Ç–≤–µ—Ç –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
bot.hears('/[^\/\@\#]', async (ctx) => {
  const { message_id } = await ctx.reply('ü§∑‚Äç‚ôÇÔ∏è –Ω–µ–∑–Ω–∞–∫–æ–º–∞—è –∫–æ–º–∞–Ω–¥–∞', {reply_to_message_id: ctx.message?.message_id} );
  await shop_list(ctx, message_id, 1000);
}); */

//–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: –ª—é–±–æ–ï —Å–ª–æ–≤–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–ø–∏—Å–æ–∫, –∫—Ä–æ–º–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤—ã—à–µ, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤
bot.on(message('text'), async (ctx) => {
  const text = ctx.message?.text;
  console.log(`–Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);
  try {
    ///[^\._\-\/\*\(\)]/  /[a-zA-Z–∞-—è–ê-–Ø0-9.-+]/
    if ((/[^\/\@]/).test(text[0])) {
      const answer = await data.insert(text) ? `"${text}" –¥–æ–±–∞–≤–ª–µ–Ω–æ üëç` : `ü§∑‚Äç‚ôÇÔ∏è "${text}" —É–∂–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ`;
      //—Å–¥–µ–ª–∞—Ç—å –æ—Ä–∞–ª–∫—É —Ç–∏–ø–∞ answerCbQuery
      const { message_id } = await ctx.reply(answer + '...', {reply_to_message_id: ctx.message?.message_id});
      shop_list(ctx, message_id, 0, answer);
    } else {
      const { message_id } = await ctx.reply(`ü§∑‚Äç‚ôÇÔ∏è –Ω–µ–∑–Ω–∞–∫–æ–º–∞—è –∫–æ–º–∞–Ω–¥–∞`, {reply_to_message_id: ctx.message?.message_id} );
    };
  }catch(err) { console.error('–ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',err); };
});

//–∫–Ω–æ–ø–æ—á–∫–∏ —Å–ø–∏—Å–∫–∞ 
//@TODO:
  //–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä {  }
  //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å

bot.on("callback_query", async (ctx)=>{
  //–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ, –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É –º–∞—Å—Å–∏–≤–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (ctx.callbackQuery.data.slice(0,4) == 'kick' && ctx.callbackQuery.message?.message_id == data.current_shop_list) {
    const index = Number(ctx.callbackQuery.data.slice(5));
    let item = data.list[index];
    console.log(`–Ω–∞–∂–∞–ª –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Ññ${index} "${item}"`);
    //@TODO! –Ω–∞–¥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞–ª—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç!
    if (index > -1) {
      await data.kick(index);
      await shop_list(ctx, data.current_shop_list, 0, `"${item}" - —Å–¥–µ–ª–∞–Ω–æ üí™`);
      ctx.answerCbQuery(item ? `${item} - —Å–¥–µ–ª–∞–Ω–æ! üëå` : 'ü§∑‚Äç‚ôÇÔ∏è –Ω–µ –Ω–∞—à–µ–ª –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ:');
    };

    //–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å:
    if (data.is_empty) {
        ctx.answerCbQuery('ü§∑‚Äç‚ôÇÔ∏è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç', true);
        ctx.editMessageText('ü§∑‚Äç‚ôÇÔ∏è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç', {reply_markup: HELP_BTN});
    };
  };

});

//–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${ctx.updateType}`, err)
});

//–∑–∞–ø—É—Å–∫
bot.launch();


// Enable graceful stop
process.once('SIGINT', () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  console.log('–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
});